# Spring Boot Common Application Properties
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html

server:
  port: 8080
  shutdown: graceful

spring:
  jpa:
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: none

---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/titi?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
    username: root
    password: 1234
  data:
    redis:
      host: localhost
      port: 6379
      connect-timeout: 3000 # Connection timeout.
      timeout: 3000 # Read timeout.
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${TITI_LOCAL_SMTP_GMAIL_USERNAME}
    password: ${TITI_LOCAL_SMTP_GMAIL_PASSWORD}
    # JavaMail Session Properties
    # https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html
    properties:
      mail:
        smtp:
          auth: true # If true, attempt to authenticate the user using the AUTH command.
          # Socket read timeout value in milliseconds. This timeout is implemented by java.net.Socket. Default is infinite timeout.
          timeout: 5000
          # Socket connection timeout value in milliseconds. This timeout is implemented by java.net.Socket. Default is infinite timeout.
          connectiontimeout: 5000
          # Socket write timeout value in milliseconds. This timeout is implemented by using a java.util.concurrent.ScheduledExecutorService
          # per connection that schedules a thread to close the socket if the timeout expires. Thus, the overhead of using this timeout
          # is one thread per connection. Default is infinite timeout.
          writetimeout: 5000
          starttls:
            # If true, enables the use of the STARTTLS command (if supported by the server) to switch the connection to
            # a TLS-protected connection before issuing any login commands. If the server does not support STARTTLS,
            # the connection continues without the use of TLS; see the mail.smtp.starttls.required property to fail if
            # STARTTLS isn't supported. Note that an appropriate trust store must configured so that the client will
            # trust the server's certificate. Defaults to false.
            enable: true

logging:
  level:
    root: info
    org:
      hibernate:
        SQL: debug
        type: trace

jwt:
  secret-key: abcdefghijklmnopqrstuwxzy0123456

crypto:
  secret-key: 12345678901234567890123456789012

---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${TITI_DEV_DATABASE_URI}:3306/titi?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
    username: ${TITI_DEV_DATABASE_USERNAME}
    password: ${TITI_DEV_DATABASE_PASSWORD}
  data:
    redis:
      host: ${TITI_DEV_REDIS_URI}
      port: 6379
      connect-timeout: 3000 # Connection timeout.
      timeout: 3000 # Read timeout.
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${TITI_DEV_SMTP_GMAIL_USERNAME}
    password: ${TITI_DEV_SMTP_GMAIL_PASSWORD}
    # JavaMail Session Properties
    # https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html
    properties:
      mail:
        smtp:
          auth: true # If true, attempt to authenticate the user using the AUTH command.
          # Socket read timeout value in milliseconds. This timeout is implemented by java.net.Socket. Default is infinite timeout.
          timeout: 5000
          # Socket connection timeout value in milliseconds. This timeout is implemented by java.net.Socket. Default is infinite timeout.
          connectiontimeout: 5000
          # Socket write timeout value in milliseconds. This timeout is implemented by using a java.util.concurrent.ScheduledExecutorService
          # per connection that schedules a thread to close the socket if the timeout expires. Thus, the overhead of using this timeout
          # is one thread per connection. Default is infinite timeout.
          writetimeout: 5000
          starttls:
            # If true, enables the use of the STARTTLS command (if supported by the server) to switch the connection to
            # a TLS-protected connection before issuing any login commands. If the server does not support STARTTLS,
            # the connection continues without the use of TLS; see the mail.smtp.starttls.required property to fail if
            # STARTTLS isn't supported. Note that an appropriate trust store must configured so that the client will
            # trust the server's certificate. Defaults to false.
            enable: true

logging:
  level:
    root: info
    org:
      hibernate:
        SQL: debug
        type: trace

jwt:
  secret-key: ${TITI_DEV_JWT_SECRET}

crypto:
  secret-key: ${TITI_DEV_CRYPTO_SECRET}
